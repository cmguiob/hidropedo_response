#' @return          SpatRaster stack
descargar_soilgrids_stack <- function(
aoi,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = tempdir(),
stack_name = "SoilGrids_stack_AOI.tif",
overwrite  = TRUE
) {
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("terra", "sf", "gdalUtilities", "dplyr", "tidyr")
# Proyección nativa SoilGrids
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Reproyecta el AOI (buffer) a Homolosine
aoi_igh <- sf::st_transform(aoi, crs = igh_proj)
bb <- as.numeric(sf::st_bbox(aoi_igh))
if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Combina variables y profundidades
grid <- expand.grid(var = variables, depth = depths, stringsAsFactors = FALSE)
vrt_files <- apply(grid, 1, function(x) {
layer_name <- paste0(x["var"], "_", x["depth"], "_", stat)
vrt_remote <- paste0(sg_url, x["var"], "/", layer_name, ".vrt")
vrt_local  <- file.path(outdir, paste0(layer_name, ".vrt"))
gdalUtilities::gdal_translate(
src_dataset   = vrt_remote,
dst_dataset   = vrt_local,
of            = "VRT",
tr            = c(250, 250),
projwin       = bb,
projwin_srs   = igh_proj,
overwrite     = overwrite
)
return(vrt_local)
})
rast_stack <- terra::rast(vrt_files)
if (!is.null(stack_name) && nzchar(stack_name)) {
outfile <- file.path(outdir, stack_name)
terra::writeRaster(rast_stack, outfile, overwrite = overwrite)
message("Stack guardado en: ", outfile)
}
return(rast_stack)
}
# --- Tu preprocesamiento de AOI ---
deptos_ruta <- here::here("Data", "INPUT_departamentos_IGAC_Abril_2025.gpkg")
capa_nombre_deptos <- sf::st_layers(deptos_ruta)$name[1]
departamentos_sf <- sf::st_read(
deptos_ruta,
layer = capa_nombre_deptos,
quiet = TRUE
) |>
dplyr::filter(DeNombre %in% c("Antioquia")) |>
tidyr::drop_na() |>
sf::st_transform(9377)
if ("SHAPE" %in% names(departamentos_sf)) {
names(departamentos_sf)[names(departamentos_sf) == "SHAPE"] <- "geometry"
departamentos_sf <- sf::st_as_sf(as.data.frame(departamentos_sf), sf_column_name = "geometry")
}
area_piloto <- sf::st_union(departamentos_sf)
area_buffer <- sf::st_buffer(area_piloto, 20000)
# Define ruta y nombre de la capa de departamentos (.gpkg)
deptos_ruta <- here("Data", "INPUT_departamentos_IGAC_Abril_2025.gpkg")
capa_nombre_deptos <- sf::st_layers(deptos_ruta)$name[1]
# Carga los departamentos (puedes filtrar los que desees)
departamentos_sf <- sf::st_read(
deptos_ruta,
layer = capa_nombre_deptos,
quiet = TRUE
) |>
dplyr::filter(DeNombre %in% c("Antioquia")) |>
tidyr::drop_na() |>
sf::st_transform(9377)
# Renombra columna si es necesario
if ("SHAPE" %in% names(departamentos_sf)) {
names(departamentos_sf)[names(departamentos_sf) == "SHAPE"] <- "geometry"
departamentos_sf <- sf::st_as_sf(as.data.frame(departamentos_sf), sf_column_name = "geometry")
}
# Une los polígonos en uno solo para el buffer (multi-polígono único)
area_piloto <- sf::st_union(departamentos_sf)
# Buffer de 20 km (en metros, CRS 9377)
area_buffer <- sf::st_buffer(area_piloto, 20000)
# Transformar a WGS84 solo si quieres visualizar/cotejar, pero para SoilGrids es mejor pasarlo como está
# --- Llama la función pasando el área ya procesada ---
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,   # Tu objeto buffer ya en CRS de tu preferencia
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif"
)
# --- Llama la función pasando el área ya procesada ---
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif",
overwrite  = TRUE      # <-- Añade este argumento
)
#' @return Un objeto terra::SpatRaster con todas las bandas apiladas.
#'
#' @details
#' - El AOI debe estar en cualquier CRS, la función lo reproyecta a Homolosine automáticamente.
#' - Descarga solo el área delimitada (bbox) para cada variable y profundidad.
#' - Crea archivos temporales VRT y finalmente apila en un único SpatRaster listo para usar.
#' - Si stack_name no es NULL, guarda el stack como GeoTIFF multibanda.
#'
#' Ejemplo de uso:
#' stack <- descargar_soilgrids_stack(area_buffer, c("clay","sand"), c("0-5cm"), "mean", "Data/SoilGrids_crop", "SoilGrids_stack_Antioquia.tif", TRUE)
descargar_soilgrids_stack <- function(
aoi,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = tempdir(),
stack_name = "SoilGrids_stack_AOI.tif",
overwrite  = TRUE
) {
# Carga o instala paquetes necesarios
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("terra", "sf", "gdalUtilities", "dplyr", "tidyr")
# Proyección nativa SoilGrids
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Reproyecta el AOI (buffer) a Homolosine
aoi_igh <- sf::st_transform(aoi, crs = igh_proj)
bb <- as.numeric(sf::st_bbox(aoi_igh)) # xmin, ymin, xmax, ymax
# Crea carpeta de salida si no existe
if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)
# Ruta base WebDAV SoilGrids
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Genera combinaciones de variable y profundidad
grid <- expand.grid(var = variables, depth = depths, stringsAsFactors = FALSE)
vrt_files <- apply(grid, 1, function(x) {
layer_name <- paste0(x["var"], "_", x["depth"], "_", stat)
vrt_remote <- paste0(sg_url, x["var"], "/", layer_name, ".vrt")
vrt_local  <- file.path(outdir, paste0(layer_name, ".vrt"))
gdalUtilities::gdal_translate(
src_dataset   = vrt_remote,
dst_dataset   = vrt_local,
of            = "VRT",
tr            = c(250, 250),
projwin       = bb,
projwin_srs   = igh_proj,
overwrite     = overwrite
)
return(vrt_local)
})
# Carga todos los VRT en un stack
rast_stack <- terra::rast(vrt_files)
# Guarda el stack como GeoTIFF multi-banda si stack_name es válido
if (!is.null(stack_name) && nzchar(stack_name)) {
outfile <- file.path(outdir, stack_name)
terra::writeRaster(rast_stack, outfile, overwrite = overwrite)
message("Stack guardado en: ", outfile)
}
return(rast_stack)
}
# --- Llama la función pasando el área ya procesada ---
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif",
overwrite  = TRUE      # <-- Añade este argumento
)
# Preprocesa tu AOI con buffer, CRS, etc. (como ya lo tienes)
# ...
# area_buffer <- tu objeto preprocesado (buffer)
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif",
overwrite  = TRUE
)
#' @return Un objeto terra::SpatRaster con todas las bandas apiladas.
#'
#' @details
#' - El AOI debe estar en cualquier CRS, la función lo reproyecta a Homolosine automáticamente.
#' - Descarga solo el área delimitada (bbox) para cada variable y profundidad.
#' - Crea archivos temporales VRT y finalmente apila en un único SpatRaster listo para usar.
#' - Si stack_name no es NULL, guarda el stack como GeoTIFF multibanda.
#'
#' Ejemplo de uso:
#' stack <- descargar_soilgrids_stack(area_buffer, c("clay","sand"), c("0-5cm"), "mean", "Data/SoilGrids_crop", "SoilGrids_stack_Antioquia.tif", TRUE)
descargar_soilgrids_stack <- function(
aoi,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = tempdir(),
stack_name = "SoilGrids_stack_AOI.tif",
overwrite  = TRUE
) {
# Carga o instala paquetes necesarios
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("terra", "sf", "gdalUtilities", "dplyr", "tidyr")
# Proyección nativa SoilGrids
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# Reproyecta el AOI (buffer) a Homolosine
aoi_igh <- sf::st_transform(aoi, crs = igh_proj)
bb <- as.numeric(sf::st_bbox(aoi_igh)) # xmin, ymin, xmax, ymax
# Crea carpeta de salida si no existe
if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)
# Ruta base WebDAV SoilGrids
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Genera combinaciones de variable y profundidad
grid <- expand.grid(var = variables, depth = depths, stringsAsFactors = FALSE)
vrt_files <- apply(grid, 1, function(x) {
layer_name <- paste0(x["var"], "_", x["depth"], "_", stat)
vrt_remote <- paste0(sg_url, x["var"], "/", layer_name, ".vrt")
vrt_local  <- file.path(outdir, paste0(layer_name, ".vrt"))
gdalUtilities::gdal_translate(
src_dataset   = vrt_remote,
dst_dataset   = vrt_local,
of            = "VRT",
tr            = c(250, 250),
projwin       = bb,
projwin_srs   = igh_proj,
overwrite     = overwrite
)
return(vrt_local)
})
# Carga todos los VRT en un stack
rast_stack <- terra::rast(vrt_files)
# Guarda el stack como GeoTIFF multi-banda si stack_name es válido
if (!is.null(stack_name) && nzchar(stack_name)) {
outfile <- file.path(outdir, stack_name)
terra::writeRaster(rast_stack, outfile, overwrite = overwrite)
message("Stack guardado en: ", outfile)
}
return(rast_stack)
}
# Preprocesa tu AOI con buffer, CRS, etc. (como ya lo tienes)
# ...
# area_buffer <- tu objeto preprocesado (buffer)
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif",
overwrite  = TRUE
)
#' @param variables Vector de nombres de propiedades SoilGrids (ejemplo: c("clay", "sand", ...))
#' @param depths Vector de profundidades (ejemplo: c("0-5cm", "5-15cm", ...))
#' @param stat Estadístico a descargar ("mean", "Q0.05", "Q0.95", etc.)
#' @param outdir Carpeta de salida donde guardar VRTs y el stack final.
#' @param stack_name Nombre del archivo GeoTIFF multibanda a exportar (opcional).
#' @param overwrite Lógico, si debe sobrescribir archivos existentes.
#' @return Un objeto terra::SpatRaster con todas las bandas apiladas.
#'
#' Ejemplo de uso:
#' stack <- descargar_soilgrids_stack(area_buffer, c("clay","sand"), c("0-5cm"), "mean", "Data/SoilGrids_crop", "SoilGrids_stack_Antioquia.tif", TRUE)
descargar_soilgrids_stack <- function(
aoi,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = tempdir(),
stack_name = "SoilGrids_stack_AOI.tif",
overwrite  = TRUE
) {
# 1. Carga o instala paquetes necesarios
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("terra", "sf", "gdalUtilities", "dplyr", "tidyr")
# 2. Proyección nativa de SoilGrids (Homolosine)
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# 3. Reproyecta el AOI (buffer) a Homolosine y extrae bbox
aoi_igh <- sf::st_transform(aoi, crs = igh_proj)
bb <- as.numeric(sf::st_bbox(aoi_igh)) # xmin, ymin, xmax, ymax
# 4. Crea carpeta de salida si no existe
if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)
# 5. Ruta base WebDAV SoilGrids
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# 6. Genera combinaciones de variable y profundidad
grid <- expand.grid(var = variables, depth = depths, stringsAsFactors = FALSE)
vrt_files <- apply(grid, 1, function(x) {
layer_name <- paste0(x["var"], "_", x["depth"], "_", stat)
vrt_remote <- paste0(sg_url, x["var"], "/", layer_name, ".vrt")
vrt_local  <- file.path(outdir, paste0(layer_name, ".vrt"))
# Maneja sobreescritura manual (compatible CRAN)
if (file.exists(vrt_local) && overwrite) file.remove(vrt_local)
gdalUtilities::gdal_translate(
src_dataset   = vrt_remote,
dst_dataset   = vrt_local,
of            = "VRT",
tr            = c(250, 250),
projwin       = bb,
projwin_srs   = igh_proj
)
return(vrt_local)
})
# 7. Carga todos los VRT en un stack multibanda
rast_stack <- terra::rast(vrt_files)
# 8. Guarda el stack como GeoTIFF multi-banda si stack_name es válido
if (!is.null(stack_name) && nzchar(stack_name)) {
outfile <- file.path(outdir, stack_name)
if (file.exists(outfile) && overwrite) file.remove(outfile)
terra::writeRaster(rast_stack, outfile, overwrite = TRUE)
message("Stack guardado en: ", outfile)
}
return(rast_stack)
}
# Suponiendo que tienes tu polígono/buffer procesado como 'area_buffer'...
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif",
overwrite  = TRUE
)
#' Usa GDAL, VRT y terra para obtener un stack multibanda listo para análisis espacial.
#'
#' @param aoi Objeto sf (buffer ya reproyectado, preferiblemente con CRS IGAC o WGS84).
#' @param variables Vector de nombres de propiedades SoilGrids.
#' @param depths Vector de profundidades.
#' @param stat Estadístico ("mean", "Q0.05", "Q0.95", etc.).
#' @param outdir Carpeta de salida.
#' @param stack_name Nombre del GeoTIFF multibanda a exportar.
#' @param overwrite Lógico, sobrescribir archivos existentes.
#' @return SpatRaster stack
descargar_soilgrids_stack <- function(
aoi,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = tempdir(),
stack_name = "SoilGrids_stack_AOI.tif",
overwrite  = TRUE
) {
# 1. Paquetes
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("terra", "sf", "gdalUtilities", "dplyr", "tidyr")
# 2. Proyección nativa SoilGrids
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
# 3. Corrige geometría y valida AOI
aoi <- sf::st_make_valid(aoi)
if (!sf::st_is_valid(aoi)) stop("La geometría del AOI no es válida.")
if (!inherits(sf::st_crs(aoi), "crs")) stop("El AOI no tiene CRS definido.")
# 4. Reproyecta a Homolosine
aoi_igh <- sf::st_transform(aoi, crs = igh_proj)
bb_raw <- sf::st_bbox(aoi_igh)
projwin <- c(bb_raw["xmin"], bb_raw["ymax"], bb_raw["xmax"], bb_raw["ymin"])
# 5. Chequea bbox
if (projwin[3] <= projwin[1] | projwin[4] >= projwin[2]) {
stop("Error: bounding box inválido para recorte GDAL (projwin). Revisa el AOI o el buffer. bbox: ", paste(projwin, collapse = ", "))
}
# (Opcional: check size)
if ((projwin[3] - projwin[1]) < 500 | (projwin[2] - projwin[4]) < 500) {
warning("El AOI es muy pequeño. Puede que el recorte de GDAL sea inválido o devuelva un raster vacío.")
}
# 6. Carpeta salida
if (!dir.exists(outdir)) dir.create(outdir, recursive = TRUE)
# 7. WebDAV SoilGrids
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# 8. Genera combinaciones y descarga cada VRT
grid <- expand.grid(var = variables, depth = depths, stringsAsFactors = FALSE)
vrt_files <- apply(grid, 1, function(x) {
layer_name <- paste0(x["var"], "_", x["depth"], "_", stat)
vrt_remote <- paste0(sg_url, x["var"], "/", layer_name, ".vrt")
vrt_local  <- file.path(outdir, paste0(layer_name, ".vrt"))
# Sobre-escritura robusta
if (file.exists(vrt_local) && overwrite) file.remove(vrt_local)
gdalUtilities::gdal_translate(
src_dataset   = vrt_remote,
dst_dataset   = vrt_local,
of            = "VRT",
tr            = c(250, 250),
projwin       = projwin,
projwin_srs   = igh_proj
)
return(vrt_local)
})
# 9. Stack multibanda
rast_stack <- terra::rast(vrt_files)
# 10. Guardar como GeoTIFF
if (!is.null(stack_name) && nzchar(stack_name)) {
outfile <- file.path(outdir, stack_name)
if (file.exists(outfile) && overwrite) file.remove(outfile)
terra::writeRaster(rast_stack, outfile, overwrite = TRUE)
message("Stack guardado en: ", outfile)
}
return(rast_stack)
}
# Suponiendo que tienes tu polígono/buffer procesado como 'area_buffer'...
stack <- descargar_soilgrids_stack(
aoi        = area_buffer,
variables  = c("clay", "sand", "silt", "soc", "phh2o", "cec"),
depths     = c("0-5cm", "5-15cm", "15-30cm"),
stat       = "mean",
outdir     = here::here("Data", "SoilGrids_crop"),
stack_name = "SoilGrids_stack_Antioquia.tif",
overwrite  = TRUE
)
# Carga paquetes necesarios
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("sf", "terra", "gdalUtilities", "here", "dplyr", "tidyr")
# Ruta y capa del .gpkg de departamentos (ajusta si es necesario)
deptos_ruta <- here("Data", "INPUT_departamentos_IGAC_Abril_2025.gpkg")
capa_nombre_deptos <- sf::st_layers(deptos_ruta)$name[1]
# Carga el departamento "Antioquia" y une polígonos
departamentos_sf <- sf::st_read(
deptos_ruta,
layer = capa_nombre_deptos,
quiet = TRUE
) %>%
dplyr::filter(DeNombre == "Antioquia") %>%
tidyr::drop_na() %>%
sf::st_transform(9377)
if ("SHAPE" %in% names(departamentos_sf)) {
names(departamentos_sf)[names(departamentos_sf) == "SHAPE"] <- "geometry"
departamentos_sf <- sf::st_as_sf(as.data.frame(departamentos_sf), sf_column_name = "geometry")
}
area_piloto <- sf::st_union(departamentos_sf)
# Buffer de 20 km (en metros, CRS 9377)
area_buffer <- sf::st_buffer(area_piloto, 20000)
# Reproyecta a IGH (Homolosine) para SoilGrids
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
area_buffer_igh <- sf::st_transform(area_buffer, crs = igh_proj)
# Bounding box en IGH
bb <- as.numeric(sf::st_bbox(area_buffer_igh))
print(bb) # Úsalos en el siguiente paso
# Parámetros de acceso a SoilGrids WebDAV
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
# Ejemplo: arcilla, 0-5cm, media
prop <- "clay"
depth <- "0-5cm"
stat <- "mean"
vrt_url <- paste0(sg_url, prop, "/", prop, "_", depth, "_", stat, ".vrt")
out_vrt <- paste0("clay_0-5cm_mean_Antioquia.vrt")
# Descarga (recorte) solo la región de Antioquia en IGH
gdal_translate(
src_dataset   = vrt_url,
dst_dataset   = out_vrt,
of            = "VRT",
tr            = c(250, 250),
projwin       = bb,              # ESTE ES EL PUNTO CRUCIAL: IGH!
projwin_srs   = igh_proj
)
# Instala/carga paquetes necesarios
if (!"pacman" %in% installed.packages()[,"Package"]) install.packages("pacman")
pacman::p_load("sf", "gdalUtilities", "terra")
# 1. Define bbox Bogotá en WGS84
bbox_bogota <- matrix(c(
-74.3, 4.45,
-74.3, 4.85,
-73.9, 4.85,
-73.9, 4.45,
-74.3, 4.45
), ncol = 2, byrow = TRUE)
pol_bogota <- sf::st_polygon(list(bbox_bogota)) |> sf::st_sfc(crs = 4326)
# 2. Reproyecta a IGH (Homolosine)
igh_proj <- "+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs"
pol_bogota_igh <- sf::st_transform(pol_bogota, crs = igh_proj)
bb_igh <- as.numeric(sf::st_bbox(pol_bogota_igh))
print(bb_igh)
# Parámetros de acceso
sg_url <- "/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
prop <- "clay"
depth <- "0-5cm"
stat <- "mean"
vrt_url <- paste0(sg_url, prop, "/", prop, "_", depth, "_", stat, ".vrt")
out_vrt <- "clay_0-5cm_mean_Bogota.vrt"
# Usa el bbox calculado en IGH
gdal_translate(
src_dataset   = vrt_url,
dst_dataset   = out_vrt,
of            = "VRT",
tr            = c(250, 250),
projwin       = bb_igh,          # ¡IMPORTANTE: IGH!
projwin_srs   = igh_proj
)
# Prueba con una ventana bastante amplia centrada en Bogotá
# Ejemplo: xmin, ymin, xmax, ymax (en metros IGH)
bb <- c(-8500000, 300000, -8200000, 600000)
igh='+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs' # proj string for Homolosine projection
#SoilGirds url
sg_url="/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
#To local VRT in homolosine (directly from the webdav connection). It is a light file, a few KB
#The first step is to obtain a VRT for the area of interest in the Homolosine projection. We suggest to use VRT for the intermediate steps to save space and computation times
gdal_translate(paste0(sg_url,'ocs/ocs_0-30cm_mean.vrt'),
"./crop_roi_igh_r.vrt",
of="VRT",tr=c(250,250),
projwin=bb,
projwin_srs =igh)
bb <- c(-8600000.000, 975000.000, -8200000.000, 610000)
igh='+proj=igh +lat_0=0 +lon_0=0 +datum=WGS84 +units=m +no_defs' # proj string for Homolosine projection
#SoilGirds url
sg_url="/vsicurl?max_retry=3&retry_delay=1&list_dir=no&url=https://files.isric.org/soilgrids/latest/data/"
#To local VRT in homolosine (directly from the webdav connection). It is a light file, a few KB
#The first step is to obtain a VRT for the area of interest in the Homolosine projection. We suggest to use VRT for the intermediate steps to save space and computation times
gdal_translate(paste0(sg_url,'ocs/ocs_0-30cm_mean.vrt'),
"./crop_roi_igh_r.vrt",
of="VRT",tr=c(250,250),
projwin=bb,
projwin_srs =igh)
gdal_translate("./crop_roi_ll_r.vrt",
"./crop_roi_ll_r.tif",
co=c("TILED=YES","COMPRESS=DEFLATE","PREDICTOR=2","BIGTIFF=YES"))
rst=rast("./crop_roi_igh_r.vrt") # Or any other of the files produce above
plot(rst) # Plot the file
